{"version":3,"sources":["serviceWorker.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","react_default","a","createElement","root","document","getElementById","Hobby","props","hobby","Imie","name","Emotion","feeling","part","Clock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","_this2","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","React","Component","Button","_this3","display","increment","bind","assertThisInitialized","decrement","onClick","List","listItems","map","number","key","toString","ReactDOM","render","src_Clock","src_Button","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.671a2967.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Element\nconst name = \"Emil\";\nconst element = <h1>Hello, {name}!</h1>;\nconst root = document.getElementById(\"root\");\n\n//Component\nfunction Hobby(props) {\n    return <h2>Moje hobby to {props.hobby}.</h2>;\n}\nfunction Imie(props) {\n  return <h2>Mam na imię {props.name}.</h2>\n}\nfunction Emotion(props) {\n  return <h2>{props.feeling} twoje {props.part}! :)</h2>\n}\n\n// State i Lifecycle\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Jest godzina {this.state.date.toLocaleTimeString()}</h2>\n      </div>\n    );\n  }\n}\n// Event Handling\nclass Button extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {display: 0};\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n  }\n  increment() {\n    this.setState({\n      display: this.state.display + 1\n    });\n  }\n  decrement() {\n    this.setState({\n      display: this.state.display - 1\n    });\n  }\n  render() {\n    return (\n      <div>\n        <p>Możesz kliknąć przyciski by podnieść lub obniżyć numer!</p>\n        <button onClick={this.increment}>+</button>\n        <span> {this.state.display} </span>\n        <button onClick={this.decrement}>-</button>\n      </div>\n    );\n  }\n}\n\n// List i Key\nfunction List(props) {\n  const numbers = [\"Pierwszy\", \"Drugi\", \"trzeci\", \"Czwarty\", \"Piąty\"];\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>\n      {number}\n    </li>\n  );\n  return (\n    <ol>{listItems}</ol>\n  );\n}\n\n// Form\n \n\n// Wyswietlanie\nfunction Body() {\n  return (\n    <div>\n      <hr />\n      <Imie name=\"Emil\" />\n      <Hobby hobby=\"Koszykówka\" />\n      <Emotion feeling=\"Uwielbiam\" part=\"oczy\" />\n      <hr />\n      <Clock />\n      <hr />\n      <Button />\n      <List />\n      <hr />\n    </div>\n  );\n}\nReactDOM.render(\n  <Body />,\n  root\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}